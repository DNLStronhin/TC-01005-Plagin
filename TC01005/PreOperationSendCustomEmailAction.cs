
// <copyright file="PreOperationSendCustomEmailAction.cs" company="">
// Copyright (c) 2024 All Rights Reserved
// </copyright>
// <author></author>
// <date>6/25/2024 5:12:14 PM</date>
// <summary>Implements the PreOperationSendCustomEmailAction Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

namespace TC_01005_Plagin.TC01005
{

    /// <summary>
    /// PreOperationSendCustomEmailAction Plugin.
    /// </summary>    
    public class PreOperationSendCustomEmailAction: PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationSendCustomEmailAction"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information.</param>
        public PreOperationSendCustomEmailAction(string unsecure, string secure)
            : base(typeof(PreOperationSendCustomEmailAction))
        {
            
           // TODO: Implement your custom configuration handling.
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// </remarks>
        protected override void ExecuteCdsPlugin(ILocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException(nameof(localContext));
            }           
            // Obtain the tracing service
            ITracingService tracingService = localContext.TracingService;

            try
            { 
                // Obtain the execution context from the service provider.  
                IPluginExecutionContext context = (IPluginExecutionContext)localContext.PluginExecutionContext;

                // Obtain the organization service reference for web service calls.  
                IOrganizationService currentUserService = localContext.CurrentUserService;

                var inputParams = context.InputParameters;
                Entity email = new Entity("email");
                email["subject"] = "CE. " + inputParams["Subject"];
                email["description"] = inputParams["Body"];

                Entity fromParty = new Entity("activityparty");
                fromParty["partyid"] = inputParams["Sender"];
                EntityCollection from = new EntityCollection(new List<Entity>() { fromParty });
                email["from"] = from;
                Entity toParty = new Entity("activityparty");
                toParty["addressused"] = inputParams["RecepientEmail"];
                EntityCollection to = new EntityCollection(new List<Entity>() { toParty });
                email["to"] = to;
                if(inputParams.TryGetValue<EntityReference>("RegardingContact", out EntityReference entityReference))
                {
                    email["regardingobjectid"] = entityReference;
                }
                var emailId = currentUserService.Create(email);
                context.OutputParameters["EmailId"] = emailId.ToString();
            }	
            // Only throw an InvalidPluginExecutionException. Please Refer https://go.microsoft.com/fwlink/?linkid=2153829.
            catch (Exception ex)
            {
                tracingService?.Trace("An error occurred executing Plugin TC_01005_Plagin.TC01005.PreOperationSendCustomEmailAction : {0}", ex.ToString());
                throw new InvalidPluginExecutionException("An error occurred executing Plugin TC_01005_Plagin.TC01005.PreOperationSendCustomEmailAction .", ex);
            }	
        }
    }
}
